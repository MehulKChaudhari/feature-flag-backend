Transform: 'AWS::Serverless-2016-10-31'
Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        CreateFeatureFlagFunction: !If
          - IsProd
          - FeatureFlagBackendProdLam-CreateFeatureFlagFunctio-YOVQpOQ9W4hR
          - feature-flag-staging-CreateFeatureFlagFunction-GLqsDX4z4A0B
        CreateUserFeatureFlagFunction: !If
          - IsProd
          - FeatureFlagBackendProdLam-CreateUserFeatureFlagFun-Fi1GnCD4KsBu
          - feature-flag-staging-CreateUserFeatureFlagFunction-NjEzqqsMA8LK
        GetFeatureFlagFunction: !If
          - IsProd
          - FeatureFlagBackendProdLambd-GetFeatureFlagFunction-I2kT1C4qt7i8
          - feature-flag-staging-GetFeatureFlagFunction-Q3JCLpJDDnjr
        GetAllFeatureFlagFunction: !If
          - IsProd
          - FeatureFlagBackendProdLam-GetAllFeatureFlagFunctio-kqYPpHWHnPqR
          - feature-flag-staging-GetAllFeatureFlagFunction-8ariY7nVTu5w
        UpdateFeatureFlagFunction: !If
          - IsProd
          - FeatureFlagBackendProdLam-UpdateFeatureFlagFunctio-9g8Vbr3cPzHL
          - feature-flag-staging-UpdateFeatureFlagFunction-eggMge9a83Tn
        UpdateUserFeatureFlagFunction: !If
          - IsProd
          - FeatureFlagBackendProdLam-UpdateUserFeatureFlagFun-FkeJ3SHwYIjo
          - feature-flag-staging-UpdateUserFeatureFlagFunction-zGVRDCT0RJk0
        GetUserFeatureFlagsFunction: !If
          - IsProd
          - FeatureFlagBackendProdLam-GetUserFeatureFlagsFunct-Qj4UvchESEwz
          - feature-flag-staging-GetUserFeatureFlagsFunction-RLHwvNvwaUbR
        GetUserFeatureFlagFunction: !If
          - IsProd
          - FeatureFlagBackendProdLam-GetUserFeatureFlagFuncti-X4iHFCSiLo92
          - feature-flag-staging-GetUserFeatureFlagFunction-OzFzkaYOmTP8
        RateLimiterFunction: !If
          - IsProd
          - FeatureFlagBackendProdLambdas-RateLimiterFunction-WubbBb4Naxsm
          - feature-flag-staging-RateLimiterFunction-2nxS9nVacqzr

Conditions:
  IsProd: !Equals [!Ref Environment, "PRODUCTION"]

Parameters:
  Environment:
    Type: String
    Default: "PRODUCTION"
    AllowedValues:
      - "PRODUCTION"
      - "DEVELOPMENT"

Resources:
  HealthCheckFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: health-check/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64  
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /health-check
            Method: GET

  RateLimiterFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: rateLimiterLambda/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64  
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /mark-concurrency-zero
            Method: PATCH

  ResetLimitFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: resetLimitLambda/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64  
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /reset-limit
            Method: POST

  GetFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: getFeatureFlagById/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /feature-flags/{flagId}
            Method: GET

  CreateFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: createFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /feature-flags/
            Method: POST

  UpdateFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: updateFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /feature-flags/{flagId}
            Method: PATCH

  GetAllFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: getAllFeatureFlags/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /feature-flags/
            Method: GET

  GetUserFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: getUserFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /users/{userId}/feature-flags/{flagId}
            Method: GET

  GetUserFeatureFlagsFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: getUserFeatureFlags/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /users/{userId}/feature-flags
            Method: GET

  CreateUserFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: createUserFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /users/{userId}/feature-flags/{flagId}
            Method: POST

  UpdateUserFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: updateUserFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /users/{userId}/feature-flags/{flagId}
            Method: PATCH
